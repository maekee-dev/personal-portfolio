console.log("-> loading /space-invaders/main.js");const canvas=document.querySelector(".game-canvas canvas");canvas.width=document.querySelector(".os-game-container").offsetWidth,canvas.height=document.querySelector(".os-game-container").offsetHeight;const c=canvas.getContext("2d"),scoreElem=document.getElementById("game-score"),config={player:{scale:.1,velocity:8},invader:{scale:1,valocity:5},game:{spawnProb:1,spawnRateMin:100,spawnRateMax:500,gridRowMin:2,gridRowMax:5,gridColumnMin:5,gridColumnMax:10}},keys={left:{pressed:!1},right:{pressed:!1},space:{pressed:!1}},explosionColors=["#122410","#122410","#1B3719","#1B3719","#539F3C","#4BD745","#EEF88F"],starColors=["white","#434343","#A8A8A8"];class Player{constructor(){const image=new Image;image.src="./assets/img/space-invaders/spaceship.png",image.onload=()=>{this.image=image,this.width=image.width*config.player.scale,this.height=image.height*config.player.scale,this.position={x:canvas.width/2-this.width/2,y:canvas.height-this.height-50}},this.velocity={x:0,y:0},this.rotation=0}draw(){c.save(),c.translate(player.position.x+player.width/2,player.position.y+player.height/2),c.rotate(this.rotation),c.translate(-player.position.x-player.width/2,-player.position.y-player.height/2),c.drawImage(this.image,this.position.x,this.position.y,this.width,this.height),c.restore()}update(){this.image&&(this.draw(),this.position.x+=this.velocity.x)}}class Invader{constructor({position:position}){const image=new Image;image.src="./assets/img/space-invaders/invader.png",image.onload=()=>{this.image=image,this.width=30*config.invader.scale,this.height=30*config.invader.scale,this.position={x:position.x,y:position.y}}}draw(){c.drawImage(this.image,this.position.x,this.position.y,this.width,this.height)}update({velocity:velocity}){this.image&&(this.draw(),this.position.x+=velocity.x,this.position.y+=velocity.y)}shoot(InvaderProjectiles){InvaderProjectiles.push(new InvaderProjectile({position:{x:this.position.x+this.width/2,y:this.position.y+this.height},velocity:{x:0,y:5}}))}}class Grid{constructor(){this.position={x:0,y:0},this.velocity={x:config.invader.valocity,y:0},this.invaders=[];const columns=Math.floor(Math.random()*(config.game.gridColumnMax-config.game.gridColumnMin)+config.game.gridColumnMin),rows=Math.floor(Math.random()*(config.game.gridRowMax-config.game.gridRowMin)+config.game.gridRowMin);this.width=30*columns;for(let x=0;x<columns;x++)for(let y=0;y<rows;y++)Math.random()<=config.game.spawnProb&&this.invaders.push(new Invader({position:{x:30*x,y:30*y}}))}update(){this.position.x+=this.velocity.x,this.position.y+=this.velocity.y,this.velocity.y=0,(this.position.x+this.width>=canvas.width||this.position.x<=0)&&(this.velocity.x=-this.velocity.x,this.velocity.y=30)}}class InvaderProjectile{constructor({position:position,velocity:velocity}){this.position=position,this.velocity=velocity,this.width=3,this.height=10}draw(){c.fillStyle="#4BD745",c.fillRect(this.position.x,this.position.y,this.width,this.height)}update(){this.draw(),this.position.x+=this.velocity.x,this.position.y+=this.velocity.y}}class Projectile{constructor({position:position,velocity:velocity}){this.position=position,this.velocity=velocity,this.radius=3}draw(){c.beginPath(),c.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI),c.fillStyle="#FFE13B",c.fill(),c.closePath()}update(){this.draw(),this.position.x+=this.velocity.x,this.position.y+=this.velocity.y}}class Particle{constructor({position:position,velocity:velocity,radius:radius,color:color,fades:fades=!0}){this.position=position,this.velocity=velocity,this.radius=radius,this.color=color,this.opacity=1,this.fades=fades}draw(){c.save(),c.globalAlpha=this.opacity,c.beginPath(),c.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI),c.fillStyle=this.color,c.fill(),c.closePath(),c.restore()}update(){this.draw(),this.position.x+=this.velocity.x,this.position.y+=this.velocity.y,this.fades&&(this.opacity-=.03)}}let frames=0,randomInterval=Math.floor(Math.random()*(config.game.spawnRateMax-config.game.spawnRateMin)+config.game.spawnRateMin),score=0,gameOver=!1;const createParticles=({object:object})=>{for(let i=0;i<30;i++)particles.push(new Particle({position:{x:object.position.x+object.width/2,y:object.position.y+object.height/2},velocity:{x:2*(Math.random()-.2),y:2*(Math.random()-.2)},radius:Math.floor(2*Math.random()),color:explosionColors[Math.floor(7*Math.random())]}))},animate=()=>{gameOver?(window.cancelAnimationFrame(animate),gsap.to(".game-over",{opacity:1,display:"flex"})):window.requestAnimationFrame(animate),c.fillStyle="#040404",c.fillRect(0,0,canvas.width,canvas.height),player.update(),particles.forEach((particle,i)=>{particle.position.y-particle.radius>=canvas.height&&(particle.position.x=Math.random()*canvas.width,particle.position.y=-particle.radius),particle.opacity<=0?setTimeout(()=>{particles.splice(i,1)},0):particle.update()}),invaderProjectiles.forEach((invaderProjectile,index)=>{invaderProjectile.position.y+invaderProjectile.height>=canvas.height?setTimeout(()=>{invaderProjectiles.splice(index,1)},0):invaderProjectile.update(),invaderProjectile.position.y+invaderProjectile.height>=player.position.y&&invaderProjectile.position.x+invaderProjectile.width>=player.position.x&&invaderProjectile.position.x<=player.position.x+player.width&&setTimeout(()=>{invaderProjectiles.splice(index,1),gameOver=!0},0)}),projectiles.forEach((projectile,i)=>{projectile.position.y+projectile.radius<=0?setTimeout(()=>{projectiles.splice(i,1)},0):projectile.update()}),grids.forEach((grid,gridIndex)=>{grid.update(),frames%100==0&&grid.invaders.length>0&&grid.invaders[Math.floor(Math.random()*grid.invaders.length)].shoot(invaderProjectiles),grid.invaders.forEach((invader,i)=>{invader.update({velocity:grid.velocity}),projectiles.forEach((projectile,j)=>{projectile.position.y-projectile.radius<=invader.position.y+invader.height&&projectile.position.x+projectile.radius>=invader.position.x&&projectile.position.x-projectile.radius<=invader.position.x+invader.width&&projectile.position.y+projectile.radius>=invader.position.y&&setTimeout(()=>{const invaderFound=grid.invaders.find(invader2=>invader2===invader),projectileFound=projectiles.find(projectile2=>projectile2===projectile);if(invaderFound&&projectileFound)if(score+=100,scoreElem.innerHTML=score,createParticles({object:invader}),grid.invaders.splice(i,1),projectiles.splice(j,1),grid.invaders.length>0){const firstInvader=grid.invaders[0],lastInvader=grid.invaders[grid.invaders.length-1];grid.width=lastInvader.position.x-firstInvader.position.x+lastInvader.width,grid.position.x=firstInvader.position.x}else grids.splice(gridIndex,1)},0)})})}),keys.left.pressed&&player.position.x>=0?(player.velocity.x=-config.player.velocity,player.rotation=-.15):keys.right.pressed&&player.position.x+player.width<=canvas.width?(player.velocity.x=config.player.velocity,player.rotation=.15):(player.velocity.x=0,player.rotation=0),frames%randomInterval==0&&(grids.push(new Grid),randomInterval=Math.floor(Math.random()*(config.game.spawnRateMax-config.game.spawnRateMin)+config.game.spawnRateMin),frames=0),frames++};addEventListener("keydown",({key:key})=>{switch(key){case"a":case"A":case"ArrowLeft":keys.left.pressed=!0;break;case"d":case"D":case"ArrowRight":keys.right.pressed=!0;break;case"w":case"W":projectiles.push(new Projectile({position:{x:player.position.x+player.width/2,y:player.position.y},velocity:{x:0,y:-10}}))}}),addEventListener("keyup",({key:key})=>{switch(key){case"a":case"A":case"ArrowLeft":keys.left.pressed=!1;break;case"d":case"D":case"ArrowRight":keys.right.pressed=!1}});let player=new Player,projectiles=[],grids=[],invaderProjectiles=[],particles=[];const startGame=()=>{if(hideItem(),!window.matchMedia("(any-pointer: fine)").matches)return gsap.to(".game-errors",{opacity:1,display:"flex"}),null;const gameCountdown=document.getElementById("game-countdown");gsap.to(".game-overlay",{opacity:1,display:"flex"}),setTimeout(()=>gameCountdown.innerHTML="2",1e3),setTimeout(()=>gameCountdown.innerHTML="1",2e3),setTimeout(()=>gameCountdown.innerHTML="GO",3e3),setTimeout(()=>{gsap.to(".game-canvas",{opacity:1}),gsap.to(".game-overlay",{opacity:0,display:"none"}),gsap.to(".os-game-header",{opacity:0,display:"none"}),animate()},4e3);for(let i=0;i<100;i++)particles.push(new Particle({position:{x:Math.random()*canvas.width,y:Math.random()*canvas.height},velocity:{x:0,y:.5},radius:1,color:starColors[Math.floor(3*Math.random())],fades:!1}))},hideItem=()=>{const cssSelector={opacity:0,display:"none"},classNames=[".console",".commands",".game",".folders",".buttons",".info",".style-1",".style-2",".style-3",".style-4"];for(let i=0;i<classNames.length;i++)gsap.to(classNames[i],cssSelector)},date=new Date,hours=date.getHours().toString().padStart(2,"0"),minutes=date.getMinutes().toString().padStart(2,"0"),time=`${hours}:${minutes}`,day=date.getDate().toString().padStart(2,"0"),month=(date.getMonth()+1).toString().padStart(2,"0"),year=date.getFullYear().toString().slice(-2),dateStr=`${day}/${month}/${year}`;document.getElementById("info-game-hour").innerHTML=time,document.getElementById("info-game-date").innerHTML=dateStr;let random,average=0;const fillGraph=()=>{for(let i=0;i<40;i++)random=100*Math.random(),average+=random,random+="%",gsap.to("#os-style-3-"+i,{height:random});average/=40,document.querySelector(".style-3 span").innerHTML=Math.floor(average)+"%"},fillLevels=()=>{for(let i=0;i<6;i++)random=100*Math.random()+"%",gsap.to("#os-style-1-"+i+" div",{width:random})},updateDownload=()=>{for(let i=0;i<20;i++)random=90*Math.random()+10+"%",gsap.to("#os-style-4-"+i,{height:random})};fillGraph(),fillLevels(),updateDownload(),setInterval(fillGraph,3e3),setInterval(fillLevels,1500),setInterval(updateDownload,1e3);