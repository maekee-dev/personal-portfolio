gsap.config({nullTargetWarn:!1});const canvas=document.querySelector(".game-canvas canvas");canvas.width=document.querySelector(".console-section .console-body").offsetWidth,canvas.height=document.querySelector(".console-section .console-body").offsetHeight;const c=canvas.getContext("2d"),scoreElem=document.getElementById("game-score"),config={player:{scale:.8,velocity:8},invader:{scale:1,valocity:5},game:{spawnProb:1,spawnRateMin:100,spawnRateMax:500,gridRowMin:2,gridRowMax:5,gridColumnMin:5,gridColumnMax:10}},keys={left:{pressed:!1},right:{pressed:!1},space:{pressed:!1}},explosionColors=["#122410","#122410","#1B3719","#1B3719","#539F3C","#4BD745","#EEF88F"],starColors=["white","#434343","#A8A8A8"];class Player{constructor(){const i=new Image;i.src="./assets/img/space-invaders/spaceship.png",i.onload=()=>{this.image=i,this.width=i.width*config.player.scale,this.height=i.height*config.player.scale,this.position={x:canvas.width/2-this.width/2,y:canvas.height-this.height-50}},this.velocity={x:0,y:0},this.rotation=0}draw(){c.save(),c.translate(player.position.x+player.width/2,player.position.y+player.height/2),c.rotate(this.rotation),c.translate(-player.position.x-player.width/2,-player.position.y-player.height/2),c.drawImage(this.image,this.position.x,this.position.y,this.width,this.height),c.restore()}update(){this.image&&(this.draw(),this.position.x+=this.velocity.x)}}class Invader{constructor({position:i}){const t=new Image;t.src="./assets/img/space-invaders/invader.png",t.onload=()=>{this.image=t,this.width=30*config.invader.scale,this.height=30*config.invader.scale,this.position={x:i.x,y:i.y}}}draw(){c.drawImage(this.image,this.position.x,this.position.y,this.width,this.height)}update({velocity:i}){this.image&&(this.draw(),this.position.x+=i.x,this.position.y+=i.y)}shoot(i){i.push(new InvaderProjectile({position:{x:this.position.x+this.width/2,y:this.position.y+this.height},velocity:{x:0,y:5}}))}}class Grid{constructor(){this.position={x:0,y:0},this.velocity={x:config.invader.valocity,y:0},this.invaders=[];const i=Math.floor(Math.random()*(config.game.gridColumnMax-config.game.gridColumnMin)+config.game.gridColumnMin),t=Math.floor(Math.random()*(config.game.gridRowMax-config.game.gridRowMin)+config.game.gridRowMin);this.width=30*i;for(let e=0;e<i;e++)for(let i=0;i<t;i++)Math.random()<=config.game.spawnProb&&this.invaders.push(new Invader({position:{x:30*e,y:30*i}}))}update(){this.position.x+=this.velocity.x,this.position.y+=this.velocity.y,this.velocity.y=0,(this.position.x+this.width>=canvas.width||this.position.x<=0)&&(this.velocity.x=-this.velocity.x,this.velocity.y=30)}}class InvaderProjectile{constructor({position:i,velocity:t}){this.position=i,this.velocity=t,this.width=3,this.height=10}draw(){c.fillStyle="#3BFFA1",c.fillRect(this.position.x,this.position.y,this.width,this.height)}update(){this.draw(),this.position.x+=this.velocity.x,this.position.y+=this.velocity.y}}class Projectile{constructor({position:i,velocity:t}){this.position=i,this.velocity=t,this.radius=3}draw(){c.beginPath(),c.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI),c.fillStyle="#FFE13B",c.fill(),c.closePath()}update(){this.draw(),this.position.x+=this.velocity.x,this.position.y+=this.velocity.y}}class Particle{constructor({position:i,velocity:t,radius:e,color:s,fades:o=!0}){this.position=i,this.velocity=t,this.radius=e,this.color=s,this.opacity=1,this.fades=o}draw(){c.save(),c.globalAlpha=this.opacity,c.beginPath(),c.arc(this.position.x,this.position.y,this.radius,0,2*Math.PI),c.fillStyle=this.color,c.fill(),c.closePath(),c.restore()}update(){this.draw(),this.position.x+=this.velocity.x,this.position.y+=this.velocity.y,this.fades&&(this.opacity-=.03)}}let frames=0,randomInterval=Math.floor(Math.random()*(config.game.spawnRateMax-config.game.spawnRateMin)+config.game.spawnRateMin),score=0,gameOver=!1;const createParticles=({object:i})=>{for(let t=0;t<30;t++)particles.push(new Particle({position:{x:i.position.x+i.width/2,y:i.position.y+i.height/2},velocity:{x:2*(Math.random()-.2),y:2*(Math.random()-.2)},radius:Math.floor(2*Math.random()),color:explosionColors[Math.floor(7*Math.random())]}))},animate=()=>{gameOver?(window.cancelAnimationFrame(animate),gsap.to(".game-over",{opacity:1,display:"flex"})):window.requestAnimationFrame(animate),c.fillStyle="#040404",c.fillRect(0,0,canvas.width,canvas.height),player.update(),particles.forEach(((i,t)=>{i.position.y-i.radius>=canvas.height&&(i.position.x=Math.random()*canvas.width,i.position.y=-i.radius),i.opacity<=0?setTimeout((()=>{particles.splice(t,1)}),0):i.update()})),invaderProjectiles.forEach(((i,t)=>{i.position.y+i.height>=canvas.height?setTimeout((()=>{invaderProjectiles.splice(t,1)}),0):i.update(),i.position.y+i.height>=player.position.y&&i.position.x+i.width>=player.position.x&&i.position.x<=player.position.x+player.width&&setTimeout((()=>{invaderProjectiles.splice(t,1),gameOver=!0}),0)})),projectiles.forEach(((i,t)=>{i.position.y+i.radius<=0?setTimeout((()=>{projectiles.splice(t,1)}),0):i.update()})),grids.forEach(((i,t)=>{i.update(),frames%100==0&&i.invaders.length>0&&i.invaders[Math.floor(Math.random()*i.invaders.length)].shoot(invaderProjectiles),i.invaders.forEach(((e,s)=>{e.update({velocity:i.velocity}),projectiles.forEach(((o,a)=>{o.position.y-o.radius<=e.position.y+e.height&&o.position.x+o.radius>=e.position.x&&o.position.x-o.radius<=e.position.x+e.width&&o.position.y+o.radius>=e.position.y&&setTimeout((()=>{const n=i.invaders.find((i=>i===e)),r=projectiles.find((i=>i===o));if(n&&r)if(score+=100,scoreElem.innerHTML=score,createParticles({object:e}),i.invaders.splice(s,1),projectiles.splice(a,1),i.invaders.length>0){const t=i.invaders[0],e=i.invaders[i.invaders.length-1];i.width=e.position.x-t.position.x+e.width,i.position.x=t.position.x}else grids.splice(t,1)}),0)}))}))})),keys.left.pressed&&player.position.x>=0?(player.velocity.x=-config.player.velocity,player.rotation=-.15):keys.right.pressed&&player.position.x+player.width<=canvas.width?(player.velocity.x=config.player.velocity,player.rotation=.15):(player.velocity.x=0,player.rotation=0),frames%randomInterval==0&&(grids.push(new Grid),randomInterval=Math.floor(Math.random()*(config.game.spawnRateMax-config.game.spawnRateMin)+config.game.spawnRateMin),frames=0),frames++};addEventListener("keydown",(({key:i})=>{switch(i){case"a":case"A":case"ArrowLeft":keys.left.pressed=!0;break;case"d":case"D":case"ArrowRight":keys.right.pressed=!0;break;case"w":case"W":projectiles.push(new Projectile({position:{x:player.position.x+player.width/2,y:player.position.y},velocity:{x:0,y:-10}}));break}})),addEventListener("keyup",(({key:i})=>{switch(i){case"a":case"A":case"ArrowLeft":keys.left.pressed=!1;break;case"d":case"D":case"ArrowRight":keys.right.pressed=!1;break}}));let player=new Player,projectiles=[],grids=[],invaderProjectiles=[],particles=[];const startGame=()=>{if(gsap.to(".page-menu",{display:"none",opacity:0}),!window.matchMedia("(any-pointer: fine)").matches)return gsap.to(".game-errors",{display:"flex"}),null;const i=document.getElementById("game-countdown");gsap.to(".game-overlay",{display:"flex"}),setTimeout((()=>i.innerHTML="2"),1e3),setTimeout((()=>i.innerHTML="1"),2e3),setTimeout((()=>i.innerHTML="GO"),3e3),setTimeout((()=>{gsap.to(".game-canvas",{display:"flex"}),gsap.to(".game-overlay",{display:"none"}),animate()}),4e3);for(let i=0;i<100;i++)particles.push(new Particle({position:{x:Math.random()*canvas.width,y:Math.random()*canvas.height},velocity:{x:0,y:.5},radius:1,color:starColors[Math.floor(3*Math.random())],fades:!1}))};